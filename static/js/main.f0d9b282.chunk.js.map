{"version":3,"sources":["logo.svg","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","state","target","id","value","setState","reload","usuario","senha","_this2","react_default","a","createElement","lib","fluid","style","height","backgroundColor","center","middle","lg","md","xs","Card","CardContent","Grid","container","direction","justify","alignItems","Avatar","alt","src","width","marginBottom","Typography","variant","TextField","label","defaultValue","onChange","margin","helperText","type","Button","color","SendOutlined_default","marginLeft","React","Component","theme","createMuiTheme","palette","primary","purple","secondary","main","App","ThemeProvider","Home_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sRCSnBC,cACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,aAAe,SAACC,GACZR,EAAKS,MAAMD,EAAEE,OAAOC,IAAMH,EAAEE,OAAOE,MACnCZ,EAAKa,SAAS,CAAEC,QAAQ,KAPxBd,EAAKS,MAAQ,CACTM,QAAS,GACTC,MAAO,IAJIhB,wEAWV,IAAAiB,EAAAd,KACL,OACIe,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMC,OAAK,EAACC,MAAO,CAAEC,OAAQ,QAASC,gBAAiB,YACnDP,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKK,OAAO,KAAKC,OAAO,KAAKJ,MAAO,CAAEC,OAAQ,UAC1CN,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKO,GAAI,EAAGC,GAAI,EAAGC,GAAI,IACnBZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACIb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAcC,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,UACnEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACIC,IAAI,OACJC,IAAI,+JACJjB,MAAO,CAAEkB,MAAO,QAASjB,OAAQ,QAASkB,aAAc,UAG5DxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAYC,QAAQ,MAApB,qBAEA1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACIlC,GAAG,UACHmC,MAAM,wBACNC,aAAc5C,KAAKM,MAAMM,QACzBiC,SAAU,SAAAxC,GAAC,OAAIS,EAAKV,cACpB0C,OAAO,SACPL,QAAQ,WACRM,WAAW,+CACX3B,MAAO,CAAEkB,MAAO,UAGpBvB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACIlC,GAAG,QACHmC,MAAM,QACNC,aAAc5C,KAAKM,MAAMM,QACzBiC,SAAU,SAAAxC,GAAC,OAAIS,EAAKV,cACpB0C,OAAO,SACPL,QAAQ,WACRO,KAAK,WACL5B,MAAO,CAAEkB,MAAO,UAGpBvB,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAQR,QAAQ,YAAYS,MAAM,UAAU9B,MAAO,CAAEkB,MAAO,SAA5D,QAEIvB,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,CAAWI,MAAO,CAAEgC,WAAY,uBAtDtCC,IAAMC,6CCDlCC,EAAQC,YAAe,CACzBC,QAAS,CACLC,QAASC,IACTC,UAAW,CACPC,KAAM,cAcHC,MARf,WACI,OACI/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAeR,MAAOA,GAClBxC,EAAAC,EAAAC,cAAC+C,EAAD,QCTQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f0d9b282.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { Typography, Card, CardHeader, CardContent } from \"@material-ui/core\";\nimport { Row, Col, Grid } from \"react-flexbox-grid\";\nimport Avatar from '@material-ui/core/Avatar';\nimport TextField from '@material-ui/core/TextField';\nimport GridMaterial from \"@material-ui/core/Grid\"\nimport { Button, Icon } from \"@material-ui/core\";\nimport LoginIcon from \"@material-ui/icons/SendOutlined\"\n\nexport default class Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            usuario: \"\",\n            senha: \"\"\n        }\n    }\n    handleChange = (e) => {\n        this.state[e.target.id] = e.target.value\n        this.setState({ reload: true })\n    }\n    render() {\n        return (\n            <Grid fluid style={{ height: '100vh', backgroundColor: \"#303030\" }}>\n                <Row center=\"xs\" middle=\"xs\" style={{ height: '100vh' }}>\n                    <Col lg={3} md={6} xs={10}>\n                        <Card >\n                            <CardContent>\n                                <GridMaterial container direction=\"column\" justify=\"center\" alignItems=\"center\" >\n                                    <Avatar\n                                        alt=\"Icon\"\n                                        src=\"https://is3-ssl.mzstatic.com/image/thumb/Purple123/v4/88/1d/ef/881defdd-4db7-2356-983a-6ba7229560ce/AppIcon-0-1x_U007emarketing-0-0-85-220-10.png/690x0w.jpg\"\n                                        style={{ width: \"100px\", height: \"100px\", marginBottom: \"30px\" }}\n                                    />\n\n                                    <Typography variant=\"h5\">Siga Fatec Pocket</Typography>\n\n                                    <TextField\n                                        id=\"usuario\"\n                                        label=\"Usuario (XXXXXXXXXSP)\"\n                                        defaultValue={this.state.usuario}\n                                        onChange={e => this.handleChange}\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                        helperText=\"O mesmo usuário que você acessa o SIGA\"\n                                        style={{ width: \"100%\" }}\n                                    />\n\n                                    <TextField\n                                        id=\"senha\"\n                                        label=\"Senha\"\n                                        defaultValue={this.state.usuario}\n                                        onChange={e => this.handleChange}\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                        type=\"password\"\n                                        style={{ width: \"100%\" }}\n                                    />\n\n                                    <br />\n\n                                    <Button variant=\"contained\" color=\"primary\" style={{ width: \"100%\" }}>\n                                        LOGIN\n                                        <LoginIcon style={{ marginLeft: \"5px\" }} />\n                                    </Button>\n                                </GridMaterial>\n                            </CardContent>\n                        </Card>\n                    </Col>\n\n                </Row>\n            </Grid >\n        )\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './pages/Home';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport { withTheme, ThemeProvider } from '@material-ui/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: purple,\n        secondary: {\n            main: '#a64ed0',\n        },\n    },\n});\n\n\nfunction App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <Home />\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}